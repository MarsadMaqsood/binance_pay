class QueryResponse {
  final String status;
  final String code;
  final QueryData? data;
  final String? errorMessage;

  QueryResponse({
    required this.status,
    required this.code,
    required this.data,
    required this.errorMessage,
  });

  factory QueryResponse.fromJson(Map<String, dynamic> json) {
    return QueryResponse(
      status: json['status'],
      code: json['code'],
      data: json['data'] != null ? QueryData.fromJson(json['data']) : null,
      errorMessage: json['errorMessage'],
    );
  }
}

class QueryData {
  /// The unique identifier assigned to the merchant's account by Binance.
  /// This ID is issued by Binance when the merchant's account is created.
  final int merchantId;

  ///This ID is generated by Binance and is used to
  ///identify a payment transaction. It should be unique for each transaction.
  final String prepayId;

  ///A unique identifier for the payment transaction
  /// that is issued by the payment system upon successful completion of the payment.
  final String? transactionId;

  ///The order id for the request.
  ///
  /// This variable is a unique identifier for the request
  /// and should only contain letters and digits. No other symbols are
  ///  allowed, and the maximum length is 32 characters.
  ///
  ///```
  ///
  final String merchantTradeNo;

  ///Current status of the order
  ///
  ///* **INITIAL**: The initial status of an order.
  ///
  ///* **PENDING**: The order is waiting for payment to be completed.
  ///
  ///* **PAID**: The order has been successfully paid.
  ///
  ///* **CANCELED**: The order has been canceled by the user or system.
  ///
  ///* **ERROR**: There was an error processing the order.
  ///
  ///* **REFUNDING**: The refund process is in progress.
  ///
  ///* **REFUNDED**: The order has been refunded.
  ///
  ///* **EXPIRED**: The order has expired and cannot be paid.
  ///
  ///
  final String status;

  ///Order currency
  final String currency;

  ///Order amount
  final String orderAmount;

  ///Consumer unique id
  final String? openUserId;

  ///pass through info, from the create order api
  final String? passThroughInfo;

  ///Timestamp when transaction happened
  final int? transactTime;

  ///Timestamp when the order was created
  final int createTime;

  ///payment related info
  final PaymentInfo? paymentInfo;

  QueryData({
    required this.merchantId,
    required this.prepayId,
    required this.transactionId,
    required this.merchantTradeNo,
    required this.status,
    required this.currency,
    required this.orderAmount,
    required this.openUserId,
    required this.passThroughInfo,
    required this.transactTime,
    required this.createTime,
    required this.paymentInfo,
  });

  factory QueryData.fromJson(Map<String, dynamic> json) {
    return QueryData(
      merchantId: json['merchantId'],
      prepayId: json['prepayId'],
      transactionId: json['transactionId'],
      merchantTradeNo: json['merchantTradeNo'],
      status: json['status'],
      currency: json['currency'],
      orderAmount: json['orderAmount'],
      openUserId: json['openUserId'],
      passThroughInfo: json['passThroughInfo'],
      transactTime: json['transactTime'],
      createTime: json['createTime'],
      paymentInfo: json['paymentInfo'] == null
          ? null
          : PaymentInfo.fromJson(json['paymentInfo']),
    );
  }
}

class PaymentInfo {
  ///payer pay id
  final String payerId;

  ///pay method
  final String payMethod;
  final List<PaymentInstruction> paymentInstructions;
  final String channel;

  PaymentInfo({
    required this.payerId,
    required this.payMethod,
    required this.paymentInstructions,
    required this.channel,
  });

  factory PaymentInfo.fromJson(Map<String, dynamic> json) {
    List<dynamic> paymentInstructionsJson = json['paymentInstructions'];
    List<PaymentInstruction> paymentInstructions = paymentInstructionsJson
        .map((instruction) => PaymentInstruction.fromJson(instruction))
        .toList();

    return PaymentInfo(
      payerId: json['payerId'],
      payMethod: json['payMethod'],
      paymentInstructions: paymentInstructions,
      channel: json['channel'],
    );
  }
}

class PaymentInstruction {
  final String currency;
  final String amount;
  final String price;

  PaymentInstruction({
    required this.currency,
    required this.amount,
    required this.price,
  });

  factory PaymentInstruction.fromJson(Map<String, dynamic> json) {
    return PaymentInstruction(
      currency: json['currency'],
      amount: json['amount'],
      price: json['price'],
    );
  }
}
